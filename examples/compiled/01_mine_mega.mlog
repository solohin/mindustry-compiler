set myUnitType @mega
set range 6
set resource0 @copper
set resource1 @lead
set resource2 @sand
set resource3 @scrap
set resource4 @coal
set resource5 @titanium
ubind myUnitType
ulocate building core false resToDeliver coreX coreY found targetCore # locate core
ucontrol move coreX coreY range 0 0
ucontrol within coreX coreY range isNearby 0
jump 10 equal isNearby false
jump 17 equal resource0 null # nothing to do if null
ulocate ore core true resource0 mineX0 mineY0 resFound building # find ore
jump 17 equal resFound true
set resource0 null
set _ ""
jump 22 equal resource1 null # nothing to do if null
ulocate ore core true resource1 mineX1 mineY1 resFound building # find ore
jump 22 equal resFound true
set resource1 null
set _ ""
jump 27 equal resource2 null # nothing to do if null
ulocate ore core true resource2 mineX2 mineY2 resFound building # find ore
jump 27 equal resFound true
set resource2 null
set _ ""
jump 32 equal resource3 null # nothing to do if null
ulocate ore core true resource3 mineX3 mineY3 resFound building # find ore
jump 32 equal resFound true
set resource3 null
set _ ""
jump 37 equal resource4 null # nothing to do if null
ulocate ore core true resource4 mineX4 mineY4 resFound building # find ore
jump 37 equal resFound true
set resource4 null
set _ ""
jump 42 equal resource5 null # nothing to do if null
ulocate ore core true resource5 mineX5 mineY5 resFound building # find ore
jump 42 equal resFound true
set resource5 null
set _ ""
set minResCount 99999999
jump 51 equal resource0 null
sensor resCountCore targetCore resource0
jump 51 greaterThan resCountCore minResCount
set minResCount resCountCore
set minResName resource0
set mineX mineX0
set mineY mineY0
set _ true # empty statement just to skip
jump 59 equal resource1 null
sensor resCountCore targetCore resource1
jump 59 greaterThan resCountCore minResCount
set minResCount resCountCore
set minResName resource1
set mineX mineX1
set mineY mineY1
set _ true # empty statement just to skip
jump 67 equal resource2 null
sensor resCountCore targetCore resource2
jump 67 greaterThan resCountCore minResCount
set minResCount resCountCore
set minResName resource2
set mineX mineX2
set mineY mineY2
set _ true # empty statement just to skip
jump 75 equal resource3 null
sensor resCountCore targetCore resource3
jump 75 greaterThan resCountCore minResCount
set minResCount resCountCore
set minResName resource3
set mineX mineX3
set mineY mineY3
set _ true # empty statement just to skip
jump 83 equal resource4 null
sensor resCountCore targetCore resource4
jump 83 greaterThan resCountCore minResCount
set minResCount resCountCore
set minResName resource4
set mineX mineX4
set mineY mineY4
set _ true # empty statement just to skip
jump 91 equal resource5 null
sensor resCountCore targetCore resource5
jump 91 greaterThan resCountCore minResCount
set minResCount resCountCore
set minResName resource5
set mineX mineX5
set mineY mineY5
set _ true # empty statement just to skip
set resToDeliver minResName
set repetitions 1000
ubind myUnitType
set procName "MINE_check"
sensor totalItems @unit @totalItems
sensor firstItem @unit @firstItem
sensor itemCapacity @unit @itemCapacity
jump 102 equal firstItem null
jump 107 equal totalItems itemCapacity
jump 107 notEqual firstItem resToDeliver
ucontrol within mineX mineY range isNearby 0
jump 105 equal isNearby true
ucontrol approach mineX mineY range 0 0
ucontrol mine mineX mineY 0 0 0
jump 113 equal 1 1
set procName "DROP_OFF check"
sensor totalItems @unit @totalItems
jump 113 equal totalItems 0
set procName "DROP_OFF"
ucontrol move coreX coreY range 0 0
ucontrol itemDrop targetCore totalItems 0 0 0
op sub repetitions repetitions 1
jump 94 greaterThan repetitions 0
jump 43 equal 1 1